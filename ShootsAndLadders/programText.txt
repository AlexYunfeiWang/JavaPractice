import java.util.Random;

public class Player {
	private int Number;
	
	private Random Rand;
	
	public int getNumber() {
		return Number;
	}
	public void setNumber(int number) {
		Number = number;
	}
	
	public int Move() {
		if (Rand == null) {
			Rand = new Random(Number);
		}
		int spaces = Rand.nextInt(6) + 1;
		System.out.println("Player " + getNumber() + " spun a " + spaces);
		return spaces;
	}
}


import java.util.ArrayList;
import java.util.List;

public class Square {
	public List<Player> Players;
	public Integer ShootTo;
	public Integer LadderTo;
	
	public Square() {
		Players = new ArrayList<>();
	}
}


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Board {
	public List<Square> Squares;
	public List<Player> Players;
	
	Map<Integer, Integer> ladderMap;
	Map<Integer, Integer> shootMap;
	
	public Board(int NumberOfPlayers) {
		Squares = new ArrayList<>();
		Players = new ArrayList<>();
		for (int i = 1; i < 3; ++i) {
			Player nextPlayer = new Player();
			nextPlayer.setNumber(i);
			Players.add(nextPlayer);
		}
		
		ladderMap = new HashMap<>();
		shootMap  = new HashMap<>();
		
		ladderMap.put(10, 18);
		ladderMap.put(24, 35);
		ladderMap.put(30, 40);
		ladderMap.put(41, 57);
		ladderMap.put(45, 55);
		ladderMap.put(48, 60);
		ladderMap.put(63, 70);
		ladderMap.put(80, 100);
		
		shootMap.put(20, 14);
		shootMap.put(32, 15);
		shootMap.put(50, 25);
		shootMap.put(51, 64);
		shootMap.put(61, 43);
		shootMap.put(78, 65);
		
		
		
		for (int j = 0; j <= 100; ++j) {
			Square newSquare = new Square();
			Squares.add(newSquare);
			
			if (ladderMap.containsKey(j)) {
				newSquare.LadderTo = ladderMap.get(j);
			}
			else if (shootMap.containsKey(j)) {
				newSquare.ShootTo = shootMap.get(j);
			}
		}
		
		Squares.get(0).Players.addAll(Players);
	}
}


import java.util.Scanner;

public class Driver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		boolean WantToPlay = true;
		
		
		do {
			System.out.println("Welcome to shoots and ladders! How many players? ");
			Scanner scan = new Scanner(System.in);
			int num = scan.nextInt();
			
			if (num < 1 || num > 2) {
				System.out.println("Player number should be 1 or 2");
				return;
			}
			
			Board board = new Board(num);
			System.out.println("Number of squares: " + board.Squares.size());
			while(board.Squares.get(board.Squares.size()-1).Players.size() == 0) {
				for (Player curPlayer : board.Players) {
					int curSquareIndex = findCurSquareIdx(board, curPlayer);
					Square curSquare = board.Squares.get(curSquareIndex);
					int move = curPlayer.Move();
					
					int nextSquareIndex = curSquareIndex + move;
					
					if (nextSquareIndex >= board.Squares.size()) {
						nextSquareIndex = curSquareIndex;
					}
					curSquare.Players.remove(curPlayer);
					System.out.println("Player " + curPlayer.getNumber() + " has moved to Square " + nextSquareIndex);
					
					if (board.Squares.get(nextSquareIndex).LadderTo != null) {
						nextSquareIndex = board.Squares.get(nextSquareIndex).LadderTo;
						System.out.println("You took a ladder to " + nextSquareIndex);
					}
					
					if (board.Squares.get(nextSquareIndex).ShootTo != null) {
						nextSquareIndex = board.Squares.get(nextSquareIndex).ShootTo;
						System.out.println("You took a shoot to " + nextSquareIndex);
					}
					board.Squares.get(nextSquareIndex).Players.add(curPlayer);
				}
				
				if (board.Squares.get(board.Squares.size()-1).Players.size() != 0) {
					int winner = board.Squares.get(board.Squares.size()-1).Players.get(0).getNumber();
					
					System.out.println("Player " + winner + " wins the game!");
					System.out.println("Would you like to play again? Y/N");
					scan = new Scanner(System.in);
					String playAgain = scan.nextLine();
					
					if (playAgain.trim().toUpperCase().equals("N")) {
						WantToPlay = false;
						scan.close();
						System.out.println("Thank you for playing, Goodbye");
					}
				}
				
			}
		} while(WantToPlay);
		
	}
	
	public static int findCurSquareIdx(Board board, Player curPlayer) {
		int targetIdx = -1;
		for (int i = 0; i < board.Squares.size(); ++i) {
			Square sq = board.Squares.get(i);
			if (sq.Players.size() > 0) {
				for (Player p : sq.Players) {
					if (p.getNumber() == curPlayer.getNumber()) {
						targetIdx = i;
						break;
					}
				}
			}
		}
		return targetIdx;
	}

}
