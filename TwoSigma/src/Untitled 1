/**
 * 
 * 
 * put(Object o, Integer w) -> w >= 0, if w == 0, it's a removal, if w > 0 and o is in our DS, you update o's weight
 * 
 * 
 * get() -> returns any object with probability = o.weight / sum of all object weights
 * 
 * 
 * put(A, 10) and put(B, 20)
 * 
 * get() -> A 1/3 of the time and B 2/3 of time
 **/


//{2,3,2,5}

//object 0: w = 2
//object 1: w = 3
//object 2: w = 1
//object 3: w = 5


//{2, 2+3, 2+3+1, 2+3+1+5} = {2, 5, 6, 11} O(logn) complexity: achieved by segment tree
//largest sum = 2+3+1+5 = 11
//when we pick: we pick 1 index from 1 to 11;
//then we search for this index in the accumulative sum array

//example: if we pick 9
//9 falls between 6 and 11, so we return whatever the smallest index which has accumulative sum greater than 9, in this case, it is 11, so we return index 3; index 3 in the original data structure is going to be 5, so we return 5


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;



public class Solution {
    
    Map<Object, Integer> map;
    List<Object> ObjectList; //the key set of the map
    List<Integer> WeightList; // the value set of the map
    List<Integer> WeightSumList; //accumulative weight list
    Random rand;
    
    
    public Solution() {
        rand = new Random();
        map = new HashMap<Object, Integer>();
        WeightList = new ArrayList<Integer>();
        WeightSumList = new ArrayList<Integer>();
        ObjectList = new ArrayList<Object>();
    }
    
    public void put(Object o, Integer w) {
        if (map.containsKey(o)) {
            if (w == 0) {
                map.remove(o);
            }
        }
        map.put(o, w);
        /*
        ObjectList.clear();
        for (Object key : map.ketSet()) {
            ObjectList.add(key);
        }
        
        WeightSumList.clear();
        for (Integer value : map.valueSet()) {
            WeightSumList.add(value);
        }
        */
        
        
        //binary search through the weightList, pick the middle and see if the weight value is changed
        //if not changed, then start = mid;
        //if it is changed, then end = mid;
        //by doing this, we can get to know which weight is changed in the weightList
        
        for (int i = 0; i < ObjectList.size(); ++i) {
            if (map.get(ObjectList.get(i)) != WeightList.get(i)) {
                WeightList.set(i, map.get(ObjectList.get(i)));
            }
        }
        calculateAccumulativeWeight();
    }
    
    public void calculateAccumulativeWeight() {
        int sum = 0;
        for (int i = 0; i < WeightList.size(); ++i) {
            sum += WeightList.get(i);
            WeightSumList.add(sum);
        }
    }
    
    public Object get() {
        //O(logn) by using binary search/tree
        
        //assuming we have a list of accumulative weights corresponding to the objects and their indices
        
        //example: {2, 5, 8, 11}
        
        int start = 0;
        int end = WeightSumList.size()-1;
        
        int randomPickWeight = rand.nextInt(WeightSumList.get(WeightSumList.size()-1)) + 1;
        
        while(start+1 < end) {
            int mid = start + (end-start)/2;
            if (WeightSumList.get(mid) == randomPickWeight) {
                return ObjectList.get(mid);
            }
            else if (WeightSumList.get(mid) < randomPickWeight) { 
                start = mid;   
            }
            else {
                end = mid;
            }
        }
        
        if (WeightSumList.get(start) >= randomPickWeight) {
            return ObjectList.get(start);
        }
        return ObjectList.get(end);
        
    }
    
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        Solution s = new Solution();
        s.put(new Character('A'), 10);
        s.put(new Character('B'), 20);
        s.put(new Character('C'), 30);
        
        Character getResult = (Character)(s.get());
        System.out.println()
        
        //s.put('A', 15);
        
        //s.put('B', 0);
    }
}

// shu@twosigmaiq.com